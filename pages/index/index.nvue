<template>
  <view class="content">
    <map class="map" id="hfgToChMap" ref="hfgToChMap" :scale="scale" :longitude="longitude" :latitude="latitude"
      :show-location="true" :polyline="polyline" :enable-scroll="true" :enable-zoom="true"></map>
    <view style="position:absolute;top: 20rpx;width: 750rpx;">
      <text style="text-align: center;font-size: 40rpx;font-weight: bold;">船舶智能降耗辅助航行系统</text>
    </view>
    <view
      style="position:absolute;left: 70rpx;top: 70rpx;border: 1rpx;padding: 10rpx;background-color: rgba(255,255,255,0.7);width: 250rpx;">
      <text style="font-size: 20rpx;font-weight: bold;" :style="{color: color}">当前航速：{{speed.toFixed(1)}}km/h</text>
    </view>
    <view
      style="position:absolute;left: 430rpx;top: 70rpx;border: 1rpx;padding: 10rpx;background-color:rgba(255,255,255,0.7);width: 250rpx;">
      <text style="font-size: 20rpx;font-weight: bold;color: #007AFF;">当前油耗：{{curr_flow}}L/m</text>
    </view>
    <view
      style="position:absolute;left: 70rpx;top: 120rpx;border: 1rpx;padding: 10rpx;background-color:rgba(255,255,255,0.7);width: 250rpx;">
      <text style="font-size: 20rpx;font-weight: bold;color: #007AFF;">最佳航速：11km/h</text>
    </view>
    <view
      style="position:absolute;left: 430rpx;top: 120rpx;border: 1rpx;padding: 10rpx;background-color:rgba(255,255,255,0.7);width: 250rpx;">
      <text style="font-size: 20rpx;font-weight: bold;color: #007AFF;">总计油耗：{{flow_all}}L</text>
    </view>
    <view style="position:absolute;left: 650rpx;top: 350rpx;padding: 10rpx;">
      <uni-icons type="gear-filled" size="30" @click="openPopup()"></uni-icons>
    </view>
    <uni-popup ref="popup" type="center" @change="changePopup">
      <view v-if="show"
        style="width: 400rpx;height:200rpx;background-color:#ffffff;border-radius: 10rpx;padding: 85rpx;flex-direction: row">
        <view style="height: 29rpx;width: 180rpx;">
          <uni-easyinput v-model="cipher" placeholder="请输入密钥" :styles="{borderColor:'#007AFF'}"></uni-easyinput>
        </view>
        <view>
          <button type="primary" size="mini" @click="check()">确认</button>
        </view>
      </view>
      <view v-else
        style="width: 400rpx;height:200rpx;background-color:#ffffff;border-radius: 10rpx;padding: 85rpx;flex-direction: row">
        <view style="height: 29rpx;width: 100rpx;">
          <uni-easyinput v-model="ip" placeholder="请输入IP" :styles="{borderColor:'#007AFF'}"></uni-easyinput>
        </view>
        <view style="height: 29rpx;width: 80rpx;">
          <uni-easyinput v-model="port" placeholder="请输入PORT" :styles="{borderColor:'#007AFF'}"></uni-easyinput>
        </view>
        <view>
          <button type="primary" size="mini" @click="closePopup()">确认</button>
        </view>
      </view>
    </uni-popup>
  </view>
</template>

<script>
  // import data1 from "@/common/data.js";
  import {
    showToast,postHex,PrefixZero,hexToDec,formatExactValue
  } from "../../lib/serial.js"
  
  
  import Big from 'big.js'
  // let serverIp = "60.174.238.227"; //60.174.238.227  192.168.31.205 192.168.0.7
  // let port = 5001; //5001 1026 26
  var currHexReq = [0x01, 0x04, 0x00, 0x01, 0x00, 0x02, 0x20, 0x0B]; //实时流量查询
  var allHexReq = [0x01, 0x04, 0x00, 0x04, 0x00, 0x04, -80, 0x08]; //总量查询
  var translate = [
    "0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",
    "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"
  ];

  // The big.js defaults are too lame for us.  We need more precision!
  Big.DP = 100000;

  // It's little endian if integer 1 is encoded as 01.00.00.00
  var littleEndian = !!(new Uint8Array((new Uint32Array([1])).buffer))[0];

  var allZeros = /^0+$/;
  var allOnes = /^1+$/;

  var UP_ARROW = 38;
  var DOWN_ARROW = 40;
  
  var Socket = plus.android.importClass("java.net.Socket");
  var inetSocketAddress = plus.android.importClass("java.net.InetSocketAddress");

  module.exports = {
	  globalData: {
	      socket:null,
	  },
    data() {
      return {
        color: "#007AFF",
        speed: 0, //当前航速
        longitude: 118.373615,
        flow_all: 0, //总油耗，升
        curr_flow: 0, //实时油耗L/min
        latitude: 32.772347,
        scale: 17, //缩放级别，取值范围为3-20
        polyline: [{
          points: [{
            latitude: 31.802004,
            longitude: 117.384754
          }]
        }],
        ip: "60.166.53.42",
        port: 8050,           
        cipher: "",
        show: true,
		socket:null,
      }
    },
    onReady() {
        this.map = uni.createMapContext("hfgToChMap", this);
    },
    onLoad() {
      let lat = 0;
      let lon = 0;
      for (let i = 0; i < 100; i++) {
        lat += 0.00000386;
        lon += 0.00005293;
        this.polyline[0].points.push({
          latitude: 31.802004 + lat,
          longitude: 117.384754 + lon
        })
      }
      this.init();
	  // if (this.pingServer(this.))
	  setInterval(() => {
	    this.getFlow();
	  }, 5000);
      this.getLocation();
      /* let data = data1.test.data2.split("\n");
      for (let n = 1; n < data.length; n++) {
      	let a = data[n].split(",");
      	if (a != "") {

      		this.polyline[0].points.push({
      			latitude: a[2],
      			longitude: a[1]
      		})
      	}
      } */
    },
    methods: {
     async init() {
        let that = this;
        plus.sqlite.openDatabase({
          name: 'first',
          path: '_doc/ship.db',
          success: function(e) {
            console.log('打开数据库ship.db成功');
            plus.sqlite.executeSql({
              name: 'first',
              sql: 'create table ip_port("id" INT(32),"ip" CHAR(110),"port" INT(10))',
              success: function(e) {
                plus.sqlite.executeSql({
                  name: 'first',
                  sql: "insert into ip_port values(1,'"+that.ip+"',"+ that.port+")",
                  success: function(e) {
                    console.log('创建表ip_port和插入数据成功');
                    plus.sqlite.selectSql({
                      name: 'first',
                      sql: 'select * from ip_port where id=1',
                      success: function(e) {
                        that.ip = e[0].ip;
                        that.port = e[0].port;
                      },
                      fail: function(e) {
                        console.log('查询SQL语句失败: ' + JSON.stringify(e));
                      }
                    });
                  },
                  fail: function(e) {
                    console.log('创建表ip_port成功但插入数据失败: ' + JSON.stringify(e));
                  }
                });
              },
              fail: function(e) {
                console.log('创建表ip_port失败: ' + JSON.stringify(e));
                plus.sqlite.selectSql({
                  name: 'first',
                  sql: 'select * from ip_port where id=1',
                  success: function(e) {
                    that.ip = e[0].ip;
                    that.port = e[0].port;
                  },
                  fail: function(e) {
                    console.log('查询SQL语句失败: ' + JSON.stringify(e));
                  }
                });
              }
            });
          },
          fail: function(e) {
            console.log('打开数据库ship.db失败');
          }
        });
		
      },
      changePopup(e) {
        if (!e.show) {
          this.cipher = "";
          this.show = true;
        }
      },
      check() {
        if (this.cipher === "123") {
          this.show = false;
        }
      },
      //打开配置框
      openPopup() {
		  console.log("kkkkkkkkkkkkkkkk");
        this.$refs.popup.open();
      },
      closePopup() {
        this.$refs.popup.close();
        this.cipher = "";
        this.show = true;
        let that = this;
        plus.sqlite.selectSql({
          name: 'first',
          sql: "update ip_port set ip='" + that.ip + "',port='" + that.port + "' where id=1",
          success: function(e) {
            console.log('修改SQL语句成功');
          },
          fail: function(e) {
            console.log('修改SQL语句失败: ' + JSON.stringify(e));
          }
        });
      },
      //每隔6稍获得流量
       getFlow() {
        let that = this;
        let all;
        var _all;
        let curr;
        var _curr;
		console.log("进入getflow........,,ip value is:"+ that.ip )
        all = postHex(allHexReq,that.ip,that.port).toString().toUpperCase();
        console.log("xxxxxxxxxxxxxx:"+all);

        if (all != -1 && all != 0) {
          _all = that.decodeAndUpdate(all); //for test
		  console.log("yyyyyyyyyyyyyyy:"+_all);
          that.flow_all = Number(_all).toFixed(1);
        }
		
        curr = postHex(currHexReq,that.ip,that.port).toString().toUpperCase();
        if (curr != -1 && curr != 0) {
          _curr = that.decodeAndUpdate(curr);
		  console.log("zzzzzzzzzzzzzzzzz:"+_curr);
          that.curr_flow = Number(_curr).toFixed(2);
        }
		// setTimeout(() => {
		//   this.getFlow();
		// }, 2000);
      },

      //每隔10秒获取当前经纬度
      getLocation() {
        let that = this;
        uni.getLocation({
          type: 'GCJ02',
          altitude: true,
          highAccuracyExpireTime: 3000,
          success: function(res) {
            that.speed = res.speed * 3.6;
            that.map.moveToLocation({ //moveToLocation将地图中心移动到当前定位点，需要配合map组件的show-location使用
              latitude: res.latitude,
              longitude: res.longitude
            });
            if (that.speed >= 13) {
              that.playAudio(2);
              that.color = "#ff0000";
            } else if (that.speed >= 11) {
              that.color = "#fffa53";
            }
            setTimeout(() => {
              that.minDistance(res.latitude, res.longitude);
            }, 4500);
          }
        });
        setTimeout(() => {
          this.getLocation();
        }, 10000);
      },
      //计算最近偏离距离
      minDistance(latitude, longitude) {
        let min = 10000000000000;
        for (let i = 0; i < this.polyline[0].points.length; i++) {
          let tmpMin = this.distance(this.polyline[0].points[i].latitude, this.polyline[0].points[i]
            .longitude, latitude, longitude);
          if (tmpMin < min) {
            min = tmpMin;
          }
        }
        if (min >= 5 && min < 50) {
          this.playAudio(1);
        }
      },
      //计算两个经纬度之间的直线距离
      distance(oldLatitude, oldLongitude, latitude, longitude) {
        var radLat1 = oldLatitude * Math.PI / 180.0;
        var radLat2 = latitude * Math.PI / 180.0;
        var a = radLat1 - radLat2;
        var b = oldLongitude * Math.PI / 180.0 - longitude * Math.PI / 180.0;
        var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) *
          Math.pow(Math.sin(b / 2), 2)));
        s = s * 6378137;
        return Math.round(s * 10000) / 10000;
      },
      //播放报警语音
      playAudio(type) {
        const innerAudioContext = uni.createInnerAudioContext();
        innerAudioContext.autoplay = true;
        //1:偏航 2:超速
        if (type === 1) {
          innerAudioContext.src =
            '/static/distance.mp3';
        } else {
          innerAudioContext.src =
            '/static/speed.mp3';
        }
        innerAudioContext.onPlay(() => {
          // console.log('开始播放');
        });
        innerAudioContext.onError((res) => {
          // console.log(res.errMsg);
          // console.log(res.errCode);
        });
      },

      decodeAndUpdate(h, data) { //将单精度（双精度）转为十进制数
        data = data || {};
        // Render in binary.  Hackish.
        var b = "";
        for (var i = 0, n = h.length; i < n; i++) {
          b += translate[hexToDec(h, i)];
        }

        // Determine configuration.  This could have all been precomputed but it is fast enough.
        var exponentBits = h.length === 8 ? 8 : 11;
        var mantissaBits = (h.length * 4) - exponentBits - 1;
        var bias = Math.pow(2, exponentBits - 1) - 1;
        var minExponent = 1 - bias - mantissaBits;

        // Break up the binary representation into its pieces for easier processing.
        var s = data.sign || b[0];
        var e = data.exponent || b.substring(1, exponentBits + 1);
        var m = data.mantissa || b.substring(exponentBits + 1);

        var value = 0;
        var text = (s === "0" ? "+" : "-");
        var multiplier = (s === "0" ? 1 : -1);
        var exactDecimal = (s === "0" ? "" : "-");

        if (allZeros.test(e)) {
          // Zero or denormalized
          if (allZeros.test(m)) {
            text += " Zero";
            exactDecimal += "0";
          } else {
            var firstOneIndex = m.indexOf("1");
            text += formatExactValue(m.substring(firstOneIndex + 1), -bias - firstOneIndex);
            value = parseInt(m, 2) * Math.pow(2, minExponent);
            exactDecimal += new Big(parseInt(m, 2)).times(new Big(2).pow(minExponent)).toFixed();
          }

        } else if (allOnes.test(e)) {
          // Infinity or NaN
          if (allZeros.test(m)) {
            text += "&#x221E;";
            value = Infinity;
          } else {
            text = "NaN";
            value = NaN;
          }
          exactDecimal = text;

        } else {
          // Normalized
          var exponent = parseInt(e, 2) - bias;
          var mantissa = parseInt(m, 2);
          text += formatExactValue(m, exponent);
          value = (1 + (mantissa * Math.pow(2, -mantissaBits))) * Math.pow(2, exponent);
          exactDecimal += new Big(1).
          plus(new Big(mantissa).times(new Big(2).pow(-mantissaBits))).
          times(new Big(2).pow(exponent)).
          toFixed();
        }
        return exactDecimal;
      },
    }
  }
</script>

<style>
  .content {
    font-size: 12rpx;
  }

  .map {
    width: 750rpx;
    height: 422rpx;
    background-color: #f0f0f0;
  }
</style>
